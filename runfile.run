// TODO: Fix variable escaping highlight on unquoted strings
// You can declare constants and use them in any command
const constant = 200
// If you want to preserve whitespaces, you have to put it between quotes
// Either double or single quotes can be used
const whitespace = "    \n    "

/// The default command gets executed when the program is called without arguments
cmd default() {
  # 'doc' is a special variable that contains the whole documentation of the program
  echo -n "$doc";
  echo 'The constant is: $constant';
  echo 'The whitespace is: "$whitespace"';
}

// Define an argument for a command by writing its name between the parentheses
// Use it in the command with the syntax: '$argument'
/// Shell command
sh cmd sh(name) {
  # Variable interpolation is done in all languages with $argument
  echo Hello $name from the Shell!
}

// The language of a command can be specified by writing its name before 'cmd'
// If no language is specified, the command will be executed in the default shell
/// Bash command
bash cmd bash(name) {
  echo "Hello $name from Bash!";
}

// Variables are replaced with their value before the command is executed
// So if you want to use one as a String, you have to put it between quotes (depending on the language)
/// Python command
py cmd py(name) {
  print("Hello $name from Python!")
}

// Any code is valid in the command's body as long as it's valid in the command's language
/// Javascript command
js cmd js(name) {
  function greet() {
    console.log("Hello $name from Javascript!");
  }
  greet();
}

// Not only interpreted languages are supported, you can also use compiled languages
// These get compiled when the specific command is called for the first time
/// Rust command
rs cmd rs(name) {
  println!("Hello $name from Rust!");
}

// Multiple arguments are separated by spaces
// All arguments are positional and required (at the moment)
cmd args(name age) {
  echo "Hello $name, you are $age years old."
}

// You can define subcommands with the 'sub' keyword
// Subcommands can be called with the syntax: 'run subcommand'
// Use 'run subcommand --help' to see the subcommand's documentation
/// I'm a subcommand!
sub subcommand {
  // Subcommands can have default commands too
  cmd default() {
    echo "Hello, I'm a Subcommand!"
  }
}

// You can include other files with the 'in' keyword and the path to the file
// The path is relative to the current file and can contain any character (even spaces)
in ./included command.run

// Even subcommands can be included
in ./included-subcommand.run

// You can also include files in a subcommand
// The included commands/subcommands will only be available in the subcommand
/// This is a subcommand with included commands
sub sub-with-included {
  in ./included command.run
  in ./included-subcommand.run
}